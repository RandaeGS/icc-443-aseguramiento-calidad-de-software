services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      - QUARKUS_PROFILE=prod
      - DB_HOST=postgres
      - DB_NAME=production
      - DB_USER=${DB_USER:-prod}
      - DB_PASSWORD=${DB_PASSWORD}
      - KEYCLOAK_URL=http://keycloak:8080/realms/project
      - KEYCLOAK_QUARKUS_SECRET=${KEYCLOAK_QUARKUS_SECRET}
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - api
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_KEYCLOAK_URL=http://localhost:7080
    ports:
      - "5173:5173"
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER:-prod}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/production:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-prod} -d production"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    container_name: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/production
      KC_DB_USERNAME: ${DB_USER:-prod}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_DB_SCHEMA: keycloak
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "7080:8080"
    command: start
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/localhost/8080; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR'
        ]
      interval: 15s
      timeout: 5s
      retries: 5

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: [ --config=/etc/otel-collector-config.yaml ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - app-network
    ports:
      - "4317:4317"
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:13133"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      collector:
        condition: service_started
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
